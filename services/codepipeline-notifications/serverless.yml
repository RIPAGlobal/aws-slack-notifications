service: codepipeline-notifications

frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  region: ap-southeast-2
  variableSyntax: "\\${((?!AWS)[ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)]+?)}" # Use this for allowing CloudFormation Pseudo-Parameters in your serverless.yml -- e.g. ${AWS::Region}. All other Serverless variables work as usual.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ':'
          - - arn
            - aws
            - dynamodb
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - 'table/aws-slack-notifications-message-ids'
    - Effect: Allow
      Action:
        - codepipeline:GetPipelineExecution
      Resource:
        Fn::Join:
          - ':'
          - - arn
            - aws
            - codepipeline
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - '*' # Limited to Pipelines in the Account + Region Deployed.
    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        Fn::Join:
          - ':'
          - - arn
            - aws
            - sqs
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - 'aws-slack-notifications-codepipeline-notifications.fifo'

  environment:
    DYNAMO_TABLE_NAME: aws-slack-notifications-message-ids
    AWS_SLACK_NOTIFICATIONS_OAUTH_ACCESS_TOKEN: ${env:AWS_SLACK_NOTIFICATIONS_OAUTH_ACCESS_TOKEN}
    CODEPIPELINE_DEPLOYMENT_NOTIFICATIONS_SLACK_CHANNEL: ${env:CODEPIPELINE_DEPLOYMENT_NOTIFICATIONS_SLACK_CHANNEL}

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  codebuild-notifier:
    handler: bin/codebuild-notifier
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'aws-slack-notifications-codepipeline-notifications.fifo'
          messageGroupId: 'codebuild-events'
          batchSize: 1      # Only take 1 Message off at a time
          enabled: true
    reservedConcurrency: 1  # Only run 1 Lambda at a time.
  codepipeline-notifier:
    handler: bin/codepipeline-notifier
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'aws-slack-notifications-codepipeline-notifications.fifo'
          messageGroupId: 'codepipeline-events'
          batchSize: 1        # Only take 1 message off at a time
    reservedConcurrency: 1  # Only run 1 Lambda at a time.
resources:
  Resources:
    CloudWatchCodePipelineEventQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        ContentBasedDeduplication: true # Required for CloudWatchEvents to be sent to this Queue as it is Fifo
        QueueName: 'aws-slack-notifications-codepipeline-notifications.fifo'
    CloudWatchCodePipelineEventRule:
      DependsOn: CloudWatchCodePipelineEventQueue
      Type: AWS::Events::Rule
      Properties:
        EventPattern:
          source:
            - aws.codepipeline
          detail-type:
            - "CodePipeline Pipeline Execution State Change"
            - "CodePipeline Action Execution State Change"
            - "CodePipeline Stage Execution State Change"
        Targets:
          - Arn:
              Fn::Join:
                - ':'
                - - arn
                  - aws
                  - sqs
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - 'aws-slack-notifications-codepipeline-notifications.fifo'
            Id: 'cloudwatch-codepipeline-event-queue'
            SqsParameters: { MessageGroupId: 'codepipeline-events' }
    CloudWatchCodeBuildEventRule:
      DependsOn: CloudWatchCodePipelineEventQueue
      Type: AWS::Events::Rule
      Properties:
        EventPattern:
          source:
            - aws.codebuild
          detail-type:
            - "CodeBuild Build State Change"
            - "CodeBuild Build Phase Change"
        Targets:
          - Arn:
              Fn::Join:
                - ':'
                - - 'arn'
                  - 'aws'
                  - 'sqs'
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - 'aws-slack-notifications-codepipeline-notifications.fifo'
            Id: 'cloudwatch-codepipeline-event-queue'
            SqsParameters: { MessageGroupId: 'codebuild-events' }
    SlackMessageIdTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: buildID
            AttributeType: S
        KeySchema:
          - AttributeName: buildID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: 'aws-slack-notifications-message-ids'